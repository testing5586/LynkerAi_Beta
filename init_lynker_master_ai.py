import os
from supabase import create_client, Client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ──────────────────────────────────────────────
# 建表逻辑
# ──────────────────────────────────────────────
def ensure_tables():
    tables = {
        "users": """
            CREATE TABLE IF NOT EXISTS public.users (
                id bigint PRIMARY KEY,
                name text,
                role text DEFAULT 'user',
                ai_provider text DEFAULT 'mock-ai',
                ai_api_key text,
                created_at timestamptz DEFAULT now()
            );
        """,
        "birthcharts": """
            CREATE TABLE IF NOT EXISTS public.birthcharts (
                id bigint PRIMARY KEY,
                user_id bigint REFERENCES public.users(id),
                birth_data jsonb,
                created_at timestamptz DEFAULT now()
            );
        """,
        "recommendations": """
            CREATE TABLE IF NOT EXISTS public.recommendations (
                id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id bigint REFERENCES public.users(id) ON DELETE CASCADE,
                target_id bigint,
                match_score numeric,
                matching_fields text[],
                ai_comment text,
                created_at timestamptz DEFAULT now()
            );
        """,
        "ai_rules": """
            CREATE TABLE IF NOT EXISTS public.ai_rules (
                id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                controller_id bigint REFERENCES public.users(id),
                target_role text,
                rule_name text,
                rule_description text,
                active boolean DEFAULT true,
                created_at timestamptz DEFAULT now()
            );
        """
    }

    for name, sql in tables.items():
        try:
            supabase.table(name).select("id").limit(1).execute()
            print(f"✅ {name} 表已存在")
        except Exception:
            print(f"🛠️ 创建 {name} 表...")
            supabase.postgrest.rpc("exec", {"sql": sql}).execute()
            print(f"✅ {name} 表创建成功")

# ──────────────────────────────────────────────
# 初始化用户与 Lynker Master
# ──────────────────────────────────────────────
def insert_default_users():
    users = [
        {"id": 1, "name": "Lynker Master", "role": "master", "ai_provider": "openai", "ai_api_key": os.getenv("OPENAI_API_KEY")},
        {"id": 2, "name": "命主A", "role": "user", "ai_provider": "mock-ai"},
        {"id": 3, "name": "命主B", "role": "user", "ai_provider": "gemini-free"},
        {"id": 5, "name": "命主C", "role": "user", "ai_provider": "mock-ai"},
    ]

    for user in users:
        existing = supabase.table("users").select("id").eq("id", user["id"]).execute()
        if not existing.data:
            supabase.table("users").insert(user).execute()
            print(f"✅ 插入用户: {user['name']} ({user['ai_provider']})")
        else:
            print(f"🔹 用户 {user['name']} 已存在，跳过")

# ──────────────────────────────────────────────
# 插入 Master 控制规则
# ──────────────────────────────────────────────
def insert_master_rules():
    rules = [
        {
            "controller_id": 1,
            "target_role": "user",
            "rule_name": "AI行为监控",
            "rule_description": "禁止用户AI助手自行连接外部API或生成未验证断语。",
        },
        {
            "controller_id": 1,
            "target_role": "user",
            "rule_name": "功能模块权限",
            "rule_description": "普通用户仅可访问命盘解析、匹配、社交功能，禁用批量研究与上传大模型。",
        },
        {
            "controller_id": 1,
            "target_role": "user",
            "rule_name": "算力配额限制",
            "rule_description": "每日最多触发AI调用50次，超出后暂停至次日。",
        }
    ]

    for rule in rules:
        existing = supabase.table("ai_rules").select("rule_name").eq("rule_name", rule["rule_name"]).execute()
        if not existing.data:
            supabase.table("ai_rules").insert(rule).execute()
            print(f"✅ 新增规则: {rule['rule_name']}")
        else:
            print(f"🔹 规则 {rule['rule_name']} 已存在，跳过")

# ──────────────────────────────────────────────
# 主程序
# ──────────────────────────────────────────────
def main():
    print("\n🔧 初始化 LynkerAI 系统数据库...")
    ensure_tables()
    insert_default_users()
    insert_master_rules()
    print("\n🎯 初始化完成！普通用户使用免费API，Lynker Master全面控制。")

if __name__ == "__main__":
    main()
