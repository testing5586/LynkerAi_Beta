创建一个新文件：master_ai_reasoner.py
要求：

📁 文件位置：
~/workspace/master_ai_reasoner.py

💡 文件功能：
- 从 Supabase 读取 birthcharts / match_results / feedback 的统计
- 基于已发现的规律做“可解释预测”（traits + time window）
- 为单个或全部用户生成预测并落库到 predictions 表
- 重要洞察加密存入 Master Vault
- 内置调用守卫（ai_guard_middleware.check_permission）

🧩 代码如下（请完整保存）：
-------------------------------------------------------------
import os
from datetime import datetime
from collections import Counter, defaultdict
from supabase import create_client, Client
from master_vault_engine import insert_vault
from ai_guard_middleware import check_permission

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
client: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# -----------------------------
# 基础数据抓取
# -----------------------------
def fetch_birthcharts():
    resp = client.table("birthcharts").select("id,name,ziwei_palace,main_star,shen_palace,birth_time").execute()
    return resp.data or []

def fetch_match_results():
    # 可选：若不存在则返回空
    try:
        resp = client.table("match_results").select("user_a_id,user_b_id,match_score,matching_fields").execute()
        return resp.data or []
    except Exception:
        return []

def fetch_feedback():
    # 可选：若不存在则返回空
    try:
        resp = client.table("feedback").select("user_id,label,score,created_at").execute()
        return resp.data or []
    except Exception:
        return []

# -----------------------------
# 规则归纳（示例启发式）
# -----------------------------
def derive_population_rules(charts):
    """
    简单统计：主星/命宫组合的出现频率与共现关系
    输出：rules = { "巳-天府": {"count": 12, "traits": ["稳重","后劲强"], "confidence": 0.62 } }
    """
    pair_counts = Counter()
    star_counts = Counter()
    palace_counts = Counter()

    for r in charts:
        pair = f"{r['ziwei_palace']}-{r['main_star']}"
        pair_counts[pair] += 1
        star_counts[r["main_star"]] += 1
        palace_counts[r["ziwei_palace"]] += 1

    total = max(1, len(charts))
    rules = {}
    for pair, c in pair_counts.items():
        palace, star = pair.split("-")
        base_conf = c / total
        # 一个简单的“特质库”示范（可后续替换为更科学的断语库）
        trait_hint = []
        if star in ("天府","武曲","廉贞","破军","紫微","贪狼"):
            trait_hint.append("性格显著")
        if palace in ("巳","午","卯"):
            trait_hint.append("行动力强")
        if "天府" in star:
            trait_hint.append("后劲强")
        if "廉贞" in star:
            trait_hint.append("规则感/反叛并存")
        if "破军" in star:
            trait_hint.append("破旧立新")

        rules[pair] = {
            "count": c,
            "confidence": round(base_conf, 4),
            "traits": list(set(trait_hint))
        }
    return rules

# -----------------------------
# 基于规则对单用户推理
# -----------------------------
def predict_for_user(user, rules):
    """
    输入：单个用户命盘 + 群体规则
    输出：可解释预测 dict
    """
    pair = f"{user['ziwei_palace']}-{user['main_star']}"
    rule = rules.get(pair, {"count": 0, "confidence": 0.1, "traits": []})

    # 时间窗示例（可扩展为流年推演）
    time_window = "未来 6-12 个月"
    # 置信度微调：身宫一致加成
    conf = rule["confidence"]
    if user.get("shen_palace") == user.get("ziwei_palace"):
        conf = min(0.95, conf + 0.08)

    explanation = {
        "user_id": user["id"],
        "user_name": user.get("name",""),
        "pair": pair,
        "traits": rule["traits"],
        "time_window": time_window,
        "confidence": round(conf, 3),
        "evidence": {
            "population_count": rule["count"],
            "population_ratio": rule["confidence"],
            "signals": ["主星/命宫组合统计", "身宫一致加成"]
        }
    }
    return explanation

# -----------------------------
# 结果入库（predictions 表）
# -----------------------------
def save_prediction(record):
    try:
        client.table("predictions").insert({
            "user_id": record["user_id"],
            "user_name": record.get("user_name",""),
            "pair": record["pair"],
            "traits": record["traits"],
            "time_window": record["time_window"],
            "confidence": record["confidence"],
            "evidence": record["evidence"],
            "created_at": datetime.utcnow().isoformat()
        }).execute()
    except Exception as e:
        print("⚠️ predictions 表不存在或 RLS 限制；请先在 Supabase 执行：")
        print(SQL_CREATE_PREDICTIONS)
        raise e

# -----------------------------
# 重要洞察 -> Vault 加密存档
# -----------------------------
def persist_insight_to_vault(explanations):
    # 仅挑选高置信度作为洞察（示例：>=0.5）
    high = [e for e in explanations if e["confidence"] >= 0.5]
    if not high:
        return
    lines = []
    for e in high:
        lines.append(
            f"组合:{e['pair']} 置信:{e['confidence']} 窗口:{e['time_window']} 特质:{'、'.join(e['traits'])}"
        )
    content = "Master Reasoner - 高置信预测快照\n" + "\n".join(lines) + f"\n时间: {datetime.utcnow()}"
    insert_vault("Reasoner快照 - 高置信预测", content, created_by="Master AI")

# -----------------------------
# 公共 API
# -----------------------------
def reason_user(user_id: int):
    # 调用守卫
    gate = check_permission(user_id)
    if gate.get("status") != "ok":
        print(gate)
        return gate

    charts = fetch_birthcharts()
    if not charts:
        return {"status": "error", "msg": "没有命盘数据"}

    rules = derive_population_rules(charts)
    u = next((x for x in charts if x["id"] == user_id), None)
    if not u:
        return {"status": "error", "msg": f"未找到用户 {user_id}"}

    explanation = predict_for_user(u, rules)
    save_prediction(explanation)
    persist_insight_to_vault([explanation])
    return {"status":"ok","prediction":explanation}

def reason_all(limit: int = 50):
    charts = fetch_birthcharts()
    if not charts:
        return {"status": "error", "msg": "没有命盘数据"}
    rules = derive_population_rules(charts)

    results = []
    for u in charts[:limit]:
        # 只在守卫通过时入库
        gate = check_permission(u["id"])
        if gate.get("status") != "ok":
            continue
        e = predict_for_user(u, rules)
        save_prediction(e)
        results.append(e)

    persist_insight_to_vault(results)
    return {"status":"ok","count":len(results)}

# -----------------------------
# 辅助：建表 SQL （如缺表时使用）
# -----------------------------
SQL_CREATE_PREDICTIONS = """
create table if not exists predictions (
  id bigint generated by default as identity primary key,
  user_id bigint not null,
  user_name text,
  pair text,
  traits jsonb,
  time_window text,
  confidence numeric,
  evidence jsonb,
  created_at timestamptz default now()
);
"""

if __name__ == "__main__":
    # 默认跑一次全量推理（最多 50 人）
    print("🚀 Master AI Reasoner 启动")
    out = reason_all(limit=50)
    print(out)
    print("✅ 完成")
-------------------------------------------------------------

💾 保存后，请自动验证：
1) 语法正确
2) 可被主环境执行
3) 打印 “✅ Master AI Reasoner 已创建并通过验证”
