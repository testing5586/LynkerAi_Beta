请为 Lynker 项目创建【用户行为日志 + 情绪识别】模块，放在 admin_dashboard/user_events/ 下，并接入现有 Flask 与 Supabase 环境，要求：

============================
一、数据库（Supabase / SQL）
============================
1) 新建表 user_events：记录用户行为流
CREATE TABLE IF NOT EXISTS public.user_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL,
  event_type TEXT NOT NULL,                         -- VIEW_PALACE / QUESTION / FEELING / MARK_RESONANCE / LOGIN / MATCH_CLICK 等
  event_payload JSONB DEFAULT '{}'::jsonb,          -- 附加数据，如 palace_name、text、target_user_id 等
  emotion_label TEXT,                                -- positive / neutral / anxious / sad / angry 等
  emotion_score NUMERIC(4,3),                        -- 0~1
  created_at TIMESTAMPTZ DEFAULT now()
);

2) 新建表 user_insights：为每个用户持续沉淀画像与需求
CREATE TABLE IF NOT EXISTS public.user_insights (
  user_id BIGINT PRIMARY KEY,
  top_concerns TEXT[] DEFAULT '{}',             -- ["夫妻宫","破军","财帛宫"] 等
  emotion_tendency TEXT DEFAULT 'neutral',      -- 倾向情绪
  last_7d_event_count INT DEFAULT 0,
  push_ready BOOLEAN DEFAULT FALSE,             -- 是否达到“可推送”阈值
  updated_at TIMESTAMPTZ DEFAULT now()
);

3) RLS（行级安全）与策略：
-- 开启 RLS
ALTER TABLE public.user_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_insights ENABLE ROW LEVEL SECURITY;

-- 仅服务端 key 可写（Replit 后端用 service role）
DROP POLICY IF EXISTS p_user_events_all ON public.user_events;
CREATE POLICY p_user_events_all ON public.user_events FOR ALL
  USING (true)
  WITH CHECK (true);

DROP POLICY IF EXISTS p_user_insights_all ON public.user_insights;
CREATE POLICY p_user_insights_all ON public.user_insights FOR ALL
  USING (true)
  WITH CHECK (true);

（如果你侦测到现有 RLS 策略冲突，请先删除后重建）

================================
二、后端文件结构（Flask + Blueprint）
================================
在 admin_dashboard/user_events/ 下创建：
- __init__.py
- event_api.py               # Flask Blueprint: /api/events 采集接口 + /api/insights 读取接口
- emotion_analyzer.py        # 情绪识别：OpenAI（优先）+ 离线词典（兜底）
- aggregator.py              # 每日聚合：把最近 7 天事件合并为 user_insights
- supabase_client.py         # 读取 env，创建 Supabase client（同步）
- schema_check.py            # 可选：启动时自检表是否存在，若无则自动创建
并修改 admin_dashboard/app.py 注册 Blueprint：/api/events, /api/insights 可用。

具体实现要求：
event_api.py：
- POST /api/events/track  接收 JSON：
  {
    "user_id": 3,
    "event_type": "VIEW_PALACE" | "QUESTION" | "FEELING" | "MARK_RESONANCE" | "...",
    "event_payload": {任意键值，例如 {"palace":"夫妻宫","text":"…"} }
  }
  流程：
  (a) 调用 emotion_analyzer.analyze(payload) → (label, score)
  (b) 插入 supabase public.user_events
  (c) 返回 {"status":"ok","id":...,"emotion":{label,score}}

- GET /api/insights/<user_id>
  返回 user_insights 画像（若不存在则返回默认空画像）

emotion_analyzer.py：
- 优先使用 OPENAI_API_KEY（或 LYNKER_MASTER_KEY）调用小模型（如 gpt-4o-mini）分析文本字段（question/feeling 文本，或 payload 中 text），输出 {label, score}
- 若无 key/或失败，则用离线词典兜底（自带一个简短中文情绪词典，如“焦虑/担心/后悔/开心/生气/愤怒/抑郁/迷茫/恐惧/希望”等关键字计分）
- label 范围建议：["positive","neutral","anxious","sad","angry"]
- score 0~1

aggregator.py：
- 提供函数 run_daily_aggregation()：
  近 7 天统计：每用户的事件总量、最高频 concern（如 payload.palace / payload.tags）、情绪众数，判断 push_ready（例如：7天事件≥5 或 出现 FEELING+anxious≥2）
  写回 user_insights（UPSERT）
- 提供 CLI 入口：python admin_dashboard/user_events/aggregator.py 直接运行一次

supabase_client.py：
- 从环境变量 SUPABASE_URL / SUPABASE_KEY 创建同步 client
- 提供 get_client() 单例

schema_check.py：
- 启动时可选检测两张表是否存在，不存在则用上面的 SQL 创建（或打印指导文案）

=========================
三、管理员面板上的可视化
=========================
在 admin_dashboard/templates/dashboard.html 增加一个卡片区块：
- “用户行为概览（7天）”
  - 今日事件数、7日事件数
  - 情绪分布小条形图（Plotly）
  - Top3 关注点（concerns）
- “用户画像示例（输入 user_id 查询）”
  - 输入框 + 查询按钮（AJAX 调 /api/insights/<id>）
  - 动态展示 emotion_tendency、top_concerns、push_ready

在 admin_dashboard/static/css/style.css 追加少量样式（跟现有深色主题一致）。

====================
四、前端采集调用示例
====================
在项目根 readme 或 ADMIN_DASHBOARD_GUIDE.md 里附上前端调用样例（可放 /docs/snippets.md）：
(1) 记录宫位查看
fetch('/api/events/track', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({
  user_id: CURRENT_USER_ID,
  event_type: 'VIEW_PALACE',
  event_payload: { palace: '夫妻宫' }
})})

(2) 记录用户提问（带文本情绪分析）
fetch('/api/events/track', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({
  user_id: CURRENT_USER_ID,
  event_type: 'QUESTION',
  event_payload: { text: '我对婚姻很担心，总是反复' }
})})

(3) 记录用户点赞“共鸣”
fetch('/api/events/track', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({
  user_id: CURRENT_USER_ID,
  event_type: 'MARK_RESONANCE',
  event_payload: { target: '文章/命例ID', tags: ['廉贞','破军'] }
})})

=========================
五、环境变量 & 兜底策略
=========================
- 优先读取 LYNKER_MASTER_KEY，其次 OPENAI_API_KEY；均不存在时自动转入“离线词典模式”
- 保证模块在无 OpenAI 的情况下依然可运行（不会报错崩溃）
- 在日志中清晰打印：正在使用哪种情绪识别模式（openai / offline）

=========================
六、验收与测试（请自动跑一遍）
=========================
1) 自动执行一次 SQL（或以 supabase client 创建）确保两表存在
2) 启动 Flask 后，自动发 3 条事件（VIEW_PALACE / QUESTION / FEELING），确认返回 emotion
3) 执行一次聚合：python admin_dashboard/user_events/aggregator.py
4) GET /api/insights/3 返回 JSON 应包含 top_concerns / emotion_tendency / push_ready
5) 在 dashboard.html 新区块可正常显示 7 天情绪分布（mock 或真实数据）

=========================
七、注意
=========================
- 不要硬编码任何 API Key
- 代码统一中文打印日志，便于我排错
- 与现有 admin_dashboard/app.py 和 SocketIO 共存，端口仍用 5000
- 若检测到 psycopg2 报错，自动降级使用 supabase.postgrest（不强依赖 psycopg2）

完成后请总结：
- 新增/修改了哪些文件
- 成功创建的 API 路由
- SQL 执行结果简报
- 如何在面板中查看“用户行为概览（7天）”与“用户画像查询”
