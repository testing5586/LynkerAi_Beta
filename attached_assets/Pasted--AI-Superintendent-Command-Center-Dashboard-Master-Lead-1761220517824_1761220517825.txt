📦 创建项目结构与主要文件
目标：生成灵客AI总部「Superintendent Command Center」
包含 Dashboard（监控统计）+ 三方协作聊天（Master / Leader / Child AI）

请生成以下文件并自动写入内容：

📁 admin_dashboard/
├── app.py
├── auth.py
├── chat_hub.py
├── data_fetcher.py
├── templates/
│   ├── login.html
│   ├── dashboard.html
│   ├── chatroom.html
├── static/
│   ├── css/style.css
│   ├── js/chart.js
│   ├── js/chat.js

==================================================
📜 文件内容如下：
==================================================

🧩 admin_dashboard/app.py
--------------------------------------------------
from flask import Flask, render_template, request, redirect, session
from flask_socketio import SocketIO, emit
from auth import verify_login
from data_fetcher import get_dashboard_data
from chat_hub import process_message

app = Flask(__name__)
app.secret_key = "lynker_dashboard_session"
socketio = SocketIO(app)

@app.route("/admin", methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        password = request.form.get("password")
        if verify_login(password):
            session["auth"] = True
            return redirect("/dashboard")
    return render_template("login.html")

@app.route("/dashboard")
def dashboard():
    if not session.get("auth"):
        return redirect("/admin")
    data = get_dashboard_data()
    return render_template("dashboard.html", data=data)

@app.route("/chatroom")
def chatroom():
    if not session.get("auth"):
        return redirect("/admin")
    return render_template("chatroom.html")

@socketio.on("send_message")
def handle_message(data):
    user_msg = data["message"]
    responses = process_message(user_msg)
    emit("receive_message", responses, broadcast=True)

if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5000)

--------------------------------------------------

🔐 admin_dashboard/auth.py
--------------------------------------------------
import os, hashlib

MASTER_KEY = os.getenv("MASTER_VAULT_KEY", "default_key")

def verify_login(password):
    token = hashlib.sha256(MASTER_KEY.encode()).hexdigest()[:16]
    return password == token

--------------------------------------------------

💬 admin_dashboard/chat_hub.py
--------------------------------------------------
import random

AI_ROLES = {
    "master": "Master AI 🧠",
    "leader": "Group Leader 🧩",
    "child": "Child AI 🤖"
}

def process_message(message):
    replies = [
        f"{AI_ROLES['master']}: 我已分析此主题，准备总结核心结论。",
        f"{AI_ROLES['leader']}: 我将协调下属 AI 执行指令。",
        f"{AI_ROLES['child']}: 正在执行命盘匹配与规律分析任务..."
    ]
    random.shuffle(replies)
    return replies

--------------------------------------------------

📊 admin_dashboard/data_fetcher.py
--------------------------------------------------
from datetime import datetime

def get_dashboard_data():
    return {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "master_status": "🧠 正常运行",
        "group_leaders": 3,
        "child_ai": 12,
        "token_today": 5321,
        "vault_entries": 143,
        "new_findings": [
            "天府坐巳婚姻晚成率 82%",
            "武曲守财局高收入命盘比例 61%",
            "太阳巨门结构偏向创意行业 47%"
        ]
    }

--------------------------------------------------

🖥️ admin_dashboard/templates/login.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <title>Superintendent 登录</title>
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body class="login-page">
    <div class="login-container">
        <h2>🔐 Superintendent Admin 登录</h2>
        <form method="POST">
            <input type="password" name="password" placeholder="输入访问口令" required>
            <button type="submit">进入系统</button>
        </form>
    </div>
</body>
</html>

--------------------------------------------------

📈 admin_dashboard/templates/dashboard.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <title>Lynker Superintendent Command Center</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
<div class="sidebar">
    <h2>🧠 LSCC</h2>
    <ul>
        <li><a href="/dashboard">📊 Dashboard</a></li>
        <li><a href="/chatroom">💬 AI 协作聊天</a></li>
    </ul>
</div>

<div class="main">
    <h1>Superintendent 控制面板</h1>
    <p>更新时间: {{ data.timestamp }}</p>
    <div class="card">
        <h3>Master AI 状态: {{ data.master_status }}</h3>
        <p>Group Leaders: {{ data.group_leaders }}</p>
        <p>Child AI 数量: {{ data.child_ai }}</p>
    </div>

    <div id="tokenChart" style="width:100%;height:300px;"></div>
    <script>
        var trace = {x:[1,2,3,4,5,6,7], y:[5000,5200,5100,5321,5400,5500,5600], type:'scatter'};
        Plotly.newPlot('tokenChart', [trace], {title:'Token 消耗趋势'});
    </script>

    <h2>🔍 最新命理规律</h2>
    <ul>
        {% for finding in data.new_findings %}
        <li>{{ finding }}</li>
        {% endfor %}
    </ul>
</div>
</body>
</html>

--------------------------------------------------

💬 admin_dashboard/templates/chatroom.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <title>AI 协作聊天室</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/socket.io/4.6.0/socket.io.js"></script>
</head>
<body>
<div class="sidebar">
    <h2>💬 三方AI协作</h2>
    <ul>
        <li><a href="/dashboard">📊 Dashboard</a></li>
        <li><a href="/chatroom">💬 Chatroom</a></li>
    </ul>
</div>

<div class="main">
    <h1>Superintendent AI 指令台</h1>
    <div id="chat-window" class="chat-window"></div>
    <input id="msg" type="text" placeholder="输入命令或提问..." />
    <button onclick="sendMsg()">发送</button>
</div>

<script>
const socket = io();
function sendMsg() {
  const msg = document.getElementById('msg').value;
  socket.emit('send_message', { message: msg });
  document.getElementById('msg').value = '';
}
socket.on('receive_message', function(data){
  const win = document.getElementById('chat-window');
  win.innerHTML += '<div class="msg">'+data.join('<br>')+'</div>';
});
</script>
</body>
</html>

--------------------------------------------------

🎨 admin_dashboard/static/css/style.css
--------------------------------------------------
body { font-family: "Microsoft YaHei", sans-serif; margin:0; display:flex; background:#f7f8fa; }
.sidebar { width:220px; background:#20232a; color:white; height:100vh; padding:20px; }
.sidebar a { color:white; text-decoration:none; display:block; margin:8px 0; }
.main { flex:1; padding:20px; }
.card { background:white; padding:15px; margin:10px 0; border-radius:8px; box-shadow:0 2px 5px rgba(0,0,0,0.1); }
.login-page { display:flex; align-items:center; justify-content:center; height:100vh; background:#1b1b1d; color:white; }
.login-container { text-align:center; background:#282c34; padding:30px; border-radius:10px; }
.chat-window { background:white; border:1px solid #ccc; padding:10px; height:400px; overflow-y:auto; margin-bottom:10px; }

==================================================

运行命令：
cd admin_dashboard
pip install flask flask-socketio plotly
python app.py

访问：
http://localhost:5000/admin
使用密码：MASTER_VAULT_KEY 的前16位哈希
例如 LynkerAI_MasterVault_2025_SecureKey_v2 → c7b5f6d12a30bdf9
