在 ~/workspace/ 中创建或更新文件：on_user_login_ai.py  
要求整合以下功能：

🎯 新增功能
1️⃣ 当用户登录时：
   - 自动触发 master_ai_reasoner.reason_user(user_id)
   - 把预测结果写入 predictions 表；
   - 若置信度 ≥ 0.6，则自动刷新「Top 10 同命推荐榜」。

2️⃣ 保留 Flask 登录触发接口：
   - 接口路径：/login_refresh
   - 参数格式：{"user_id": 2}
   - 返回数据包括：
     ✅ AI预测结果
     ✅ 匹配推荐榜Top 10（来自 recommendations 表）

3️⃣ 权限控制：
   - 普通用户使用自己的 AI Provider（free）
   - Master AI / Superintendent Admin 使用 Lynker 主 Key
   - 仅当用户触发登录时运行，不做后台循环（节省 token）

4️⃣ 自动日志记录：
   - 每次触发都写入 logs/user_login_activity.log
   - 包含时间戳、用户ID、预测置信度、推荐榜刷新状态

📄 代码逻辑如下：
-------------------------------------------------------------

import os
from flask import Flask, request, jsonify
from datetime import datetime
from master_ai_reasoner import reason_user
from supabase import create_client, Client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
client: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

app = Flask(__name__)

LOG_PATH = "logs/user_login_activity.log"
os.makedirs("logs", exist_ok=True)

def write_log(msg):
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {msg}\n")

def get_top_10_recommendations():
    try:
        resp = client.table("recommendations").select("user_a_name,user_b_name,match_score,matching_fields").order("match_score", desc=True).limit(10).execute()
        return resp.data or []
    except Exception as e:
        print("⚠️ 无法获取推荐榜:", e)
        return []

@app.route("/login_refresh", methods=["POST"])
def login_refresh():
    data = request.json
    user_id = data.get("user_id")
    if not user_id:
        return jsonify({"error": "缺少 user_id 参数"}), 400

    write_log(f"🔔 用户 {user_id} 登录触发推理引擎...")

    # 执行个体推理
    try:
        result = reason_user(user_id)
    except Exception as e:
        write_log(f"❌ 推理错误: {e}")
        return jsonify({"status": "error", "msg": str(e)}), 500

    prediction = result.get("prediction", {})
    conf = prediction.get("confidence", 0)
    refreshed = False

    # 若置信度高则刷新推荐榜
    if conf >= 0.6:
        write_log(f"✅ 用户 {user_id} 推理置信度高({conf})，刷新推荐榜。")
        refreshed = True

    top10 = get_top_10_recommendations()
    write_log(f"📊 登录结果: user={user_id}, conf={conf}, refreshed={refreshed}")

    return jsonify({
        "status": "ok",
        "user_id": user_id,
        "prediction": prediction,
        "recommendations": top10
    })

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

-------------------------------------------------------------

💾 保存后自动验证：
1️⃣ 确保 /login_refresh 可POST；
2️⃣ 返回用户预测结果与推荐榜；
3️⃣ 在 logs 文件夹中生成 activity.log；
4️⃣ 输出 ✅ Master AI 登录触发推理模块创建成功。
