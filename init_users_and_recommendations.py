import os
from supabase import create_client, Client

# 从环境变量读取 Supabase 配置
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def ensure_users_table():
    """确保 users 表存在"""
    try:
        supabase.table("users").select("id").limit(1).execute()
        print("✅ users 表已存在")
    except Exception:
        print("🛠️ 创建 users 表...")
        supabase.postgrest.rpc(
            "exec",
            {
                "sql": """
                CREATE TABLE IF NOT EXISTS public.users (
                    id bigint PRIMARY KEY,
                    name text,
                    ai_api_key text
                );
                """
            }
        ).execute()
        print("✅ users 表创建成功")

def ensure_recommendations_table():
    """确保 recommendations 表存在"""
    try:
        supabase.table("recommendations").select("id").limit(1).execute()
        print("✅ recommendations 表已存在")
    except Exception:
        print("🛠️ 创建 recommendations 表...")
        supabase.postgrest.rpc(
            "exec",
            {
                "sql": """
                CREATE TABLE IF NOT EXISTS public.recommendations (
                    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id bigint REFERENCES public.users(id) ON DELETE CASCADE,
                    target_id bigint,
                    match_score numeric,
                    matching_fields text[],
                    ai_comment text,
                    created_at timestamptz DEFAULT now()
                );
                """
            }
        ).execute()
        print("✅ recommendations 表创建成功")

def insert_default_users():
    """插入命主A、B、C"""
    default_users = [
        {"id": 2, "name": "命主A", "ai_api_key": None},
        {"id": 3, "name": "命主B", "ai_api_key": None},
        {"id": 5, "name": "命主C", "ai_api_key": None},
    ]

    for user in default_users:
        existing = supabase.table("users").select("id").eq("id", user["id"]).execute()
        if not existing.data:
            supabase.table("users").insert(user).execute()
            print(f"✅ 插入用户: {user['name']}")
        else:
            print(f"🔹 用户 {user['name']} 已存在，跳过插入")

def main():
    print("🔧 LynkerAI 初始化开始...\n")
    ensure_users_table()
    ensure_recommendations_table()
    insert_default_users()
    print("\n✅ 初始化完成！可以重新运行 pattern_match_engine_v3.py")

if __name__ == "__main__":
    main()
